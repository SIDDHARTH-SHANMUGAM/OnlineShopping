CREATE TABLE Users (
    userId SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
    password VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Addresses (
    addressId SERIAL PRIMARY KEY,
    userId INT NOT NULL,
    address TEXT NOT NULL,
    city VARCHAR(100) NOT NULL,
    state VARCHAR(100) NOT NULL,
    zipCode VARCHAR(6) NOT NULL,
    country VARCHAR(100) NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES Users(userId) ON DELETE CASCADE
);

CREATE TABLE Sessions (
    sessionId SERIAL PRIMARY KEY,
    userId INT NOT NULL,
    sessionToken VARCHAR(255) UNIQUE NOT NULL,
    status VARCHAR(10) CHECK (status IN ('Active', 'Expired', 'Revoked')) DEFAULT 'Active',
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expiresAt TIMESTAMP DEFAULT (CURRENT_TIMESTAMP + INTERVAL '24 hours'),
    FOREIGN KEY (userId) REFERENCES Users(userId) ON DELETE CASCADE
);

CREATE TABLE Shops (
    shopId SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE ShopAdmins (
    shopId INT NOT NULL,
    userId INT NOT NULL,
    PRIMARY KEY (shopId, userId),
    FOREIGN KEY (shopId) REFERENCES Shops(shopId) ON DELETE CASCADE,
    FOREIGN KEY (userId) REFERENCES Users(userId) ON DELETE CASCADE
);

CREATE TABLE Products (
    productId SERIAL PRIMARY KEY,
    shopId INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    category VARCHAR(100),
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    stockQuantity INT NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (shopId) REFERENCES Shops(shopId) ON DELETE CASCADE
);

CREATE TABLE Cart (
    cartId SERIAL PRIMARY KEY,
    userId INT,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES Users(userId)
);

CREATE TABLE CartItems (
    cartItemId SERIAL PRIMARY KEY,
    cartId INT,
    productId INT,
    quantity INT NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (cartId) REFERENCES Cart(cartId),
    FOREIGN KEY (productId) REFERENCES Products(productId)
);

CREATE TABLE Orders (
    orderId SERIAL PRIMARY KEY,
    userId INT,
    totalAmount DECIMAL(10,2) NOT NULL,
    status VARCHAR(10) CHECK (status IN ('Pending', 'Shipped', 'Delivered', 'Cancelled')) DEFAULT 'Pending',
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    addressId INT NOT NULL,
    FOREIGN KEY (userId) REFERENCES Users(userId),
    FOREIGN KEY (addressId) REFERENCES Addresses(addressId)
);

CREATE TABLE OrderItems (
    orderItemId SERIAL PRIMARY KEY,
    orderId INT,
    productId INT,
    quantity INT NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (orderId) REFERENCES Orders(orderId),
    FOREIGN KEY (productId) REFERENCES Products(productId)
);

CREATE TABLE Payments (
    paymentId SERIAL PRIMARY KEY,
    orderId INT,
    userId INT,
    amount DECIMAL(10,2) NOT NULL,
    paymentMethod VARCHAR(20) CHECK (paymentMethod IN ('Credit Card', 'Debit Card', 'PayPal', 'Cash on Delivery')) NOT NULL,
    status VARCHAR(10) CHECK (status IN ('Pending', 'Completed', 'Failed')) DEFAULT 'Pending',
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (orderId) REFERENCES Orders(orderId),
    FOREIGN KEY (userId) REFERENCES Users(userId)
);
